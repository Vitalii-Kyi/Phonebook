{"version":3,"file":"static/js/26.b7ec22fd.chunk.js","mappings":"gPAEaA,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mPActBC,EAAOH,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yEAMfG,EAAYL,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kaAkBzBK,EAAWP,EAAAA,GAAAA,MAAYQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,oF,SCpCrB,SAASO,EAAQC,GAA2B,IAAxBC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UACrCC,GAAWC,EAAAA,EAAAA,MAIjB,OACEC,EAAAA,EAAAA,MAACjB,EAAS,CAAAkB,SAAA,EACRC,EAAAA,EAAAA,KAACX,EAAQ,CAACY,KAAK,WAAWC,QAASP,EAAWQ,SAJ7B,WAAH,OAASP,GAASQ,EAAAA,EAAAA,IAAgBX,GAAK,KAKrDO,EAAAA,EAAAA,KAACf,EAAI,CAAAc,SAAEL,KACPM,EAAAA,EAAAA,KAACb,EAAS,CAACc,KAAK,SAASI,QAPR,WAAH,OAAST,GAASU,EAAAA,EAAAA,IAAWb,GAAK,EAODM,SAAC,aAKtD,CClBO,I,IAAMQ,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,KAAM,ECEtCC,EAAO5B,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gICEd,SAAS2B,IACtB,IAAQF,GCDMG,EAAAA,EAAAA,IAAYL,GDClBE,MAER,OACET,EAAAA,EAAAA,KAACU,EAAI,CAAAX,SACFU,EAAMI,KAAI,SAAArB,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAS,OAC/BK,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACT,EAAQ,CAACE,GAAIA,EAAIC,KAAMA,EAAMC,UAAWA,KADlCF,EAEJ,KAIb,CEdO,I,EAAMqB,EAAWhC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8mBCEpB,SAAS+B,IACtB,IAAMnB,GAAWC,EAAAA,EAAAA,MAcjB,OACEC,EAAAA,EAAAA,MAACgB,EAAQ,CAACE,SAbS,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACT1B,EAAOyB,EAAKE,SAAS3B,KAAK4B,MAChC,GAAa,KAAT5B,EAGF,OAFAE,GAAS2B,EAAAA,EAAAA,IAAQ7B,SACjByB,EAAKK,QAGPC,MAAM,yCACR,EAGmC1B,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,SAAO0B,KAAK,UACZ1B,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,eAG5B,CCvBO,IAAM4B,GAAmBC,EAAAA,EAAAA,IAAiB7C,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wD,UCIlC,SAAS6C,IACtB,OACE/B,EAAAA,EAAAA,MAACgC,EAAAA,EAAG,CAAA/B,SAAA,EACFC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,MAAM,gBAEdhC,EAAAA,EAAAA,KAACe,EAAU,KACXf,EAAAA,EAAAA,KAACW,EAAQ,KACTX,EAAAA,EAAAA,KAAC2B,EAAgB,MAGvB,C","sources":["components/TaskItem/TaskItem.styled.js","components/TaskItem/TaskItem.jsx","redux/tasks/selectors.js","components/TaskList/TaskList.styled.js","components/TaskList/TaskList.jsx","hooks/useTasks.js","components/TaskEditor/TaskEditor.styled.js","components/TaskEditor/TaskEditor.jsx","pages/Tasks.styled.js","pages/Tasks.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const TaskThumb = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  border: 1px outset grey;\n  padding: 2px;\n  border-radius: 4px;\n  transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.08);\n  }\n`;\n\nexport const Text = styled.b`\n  text-align: initial;\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const DelButton = styled.button`\n  font-size: 13px;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n    'Lucida Sans', Arial, sans-serif;\n  margin-left: auto;\n  padding: 2px 8px;\n  color: white;\n  background-color: #0000000;\n  border-radius: 4px;\n  transition: transform 800ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: transparent;\n    color: grey;\n    transform: scale(1.1);\n  }\n`;\n\nexport const Checkbox = styled.input`\n  margin-left: 8px;\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteTask, toggleCompleted } from 'redux/tasks/tasksSlice';\nimport { Checkbox, DelButton, TaskThumb, Text } from './TaskItem.styled';\n\nexport default function TaskItem({ id, text, completed }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n  const handleToggle = () => dispatch(toggleCompleted(id));\n\n  return (\n    <TaskThumb>\n      <Checkbox type=\"checkbox\" checked={completed} onChange={handleToggle} />\n      <Text>{text}</Text>\n      <DelButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </DelButton>\n    </TaskThumb>\n  );\n}","export const selectAllTasks = state => state.tasks;\n","import { styled } from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 12px;\n`;\n","import TaskItem from 'components/TaskItem/TaskItem';\nimport { useTasks } from 'hooks/useTasks';\nimport { List } from './TaskList.styled';\n\nexport default function TaskList() {\n  const { tasks } = useTasks();\n\n  return (\n    <List>\n      {tasks.map(({ id, text, completed }) => (\n        <li key={id}>\n          <TaskItem id={id} text={text} completed={completed} />\n        </li>\n      ))}\n    </List>\n  );\n}","import { useSelector } from 'react-redux';\nimport { selectAllTasks } from 'redux/tasks/selectors';\n\nexport const useTasks = () => {\n  const tasks = useSelector(selectAllTasks);\n\n  return tasks;\n};\n","import { styled } from 'styled-components';\n\nexport const EditForm = styled.form`\n  display: flex;\n  gap: 12px;\n  background-color: rgba(202, 202, 202, 0.8);\n  width: 100%;\n  margin: auto;\n  border: 1px outset black;\n  border-radius: 4px;\n  padding: 20px;\n  margin-bottom: 28px;\n\n  button {\n    font-weight: bold;\n    width: 120px;\n    height: 48px;\n    padding: 4px 8px;\n    border-radius: 4px;\n    text-transform: uppercase;\n    background-color: rgba(144, 144, 144, 0.8);\n  }\n\n  button:hover,\n  button:focus {\n    background-color: black;\n    color: white;\n  }\n\n  input {\n    width: 100%;\n    padding: 2px 12px;\n    border-radius: 4px;\n    outline: none;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/tasksSlice';\nimport { EditForm } from './TaskEditor.styled';\n\nexport default function TaskEditor() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <EditForm onSubmit={handleSubmit}>\n      <input name=\"text\" />\n      <button type=\"submit\">Add task</button>\n    </EditForm>\n  );\n}","import { createGlobalStyle } from 'styled-components';\n\nexport const TasksGlobalStyle = createGlobalStyle`\n  body{\n    background-color: #e8e8e8;\n  }\n`;\n","import { Helmet } from 'react-helmet';\nimport TaskList from 'components/TaskList/TaskList';\nimport TaskEditor from 'components/TaskEditor/TaskEditor';\nimport { TasksGlobalStyle } from './Tasks.styled';\nimport { Box } from 'components/GlobalStyle';\n\nexport default function Tasks() {\n  return (\n    <Box>\n      <Helmet title=\"Your tasks\" />\n\n      <TaskEditor />\n      <TaskList />\n      <TasksGlobalStyle />\n    </Box>\n  );\n}"],"names":["TaskThumb","styled","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","DelButton","_templateObject3","Checkbox","_templateObject4","TaskItem","_ref","id","text","completed","dispatch","useDispatch","_jsxs","children","_jsx","type","checked","onChange","toggleCompleted","onClick","deleteTask","selectAllTasks","state","tasks","List","TaskList","useSelector","map","EditForm","TaskEditor","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","name","TasksGlobalStyle","createGlobalStyle","Tasks","Box","Helmet","title"],"sourceRoot":""}